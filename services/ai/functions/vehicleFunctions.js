// functions/vehicleFunctions.js
import Vehicle from "../../../models/vehicles.model.js";

export async function getUserVehicles(userId) {
  try {
    console.log(`üöó Getting vehicles for user: ${userId}`);
    
    const vehicles = await Vehicle.find({ userId })
      .select('licensePlate capacity imageVehicle createdAt')
      .sort({ createdAt: -1 })
      .lean();

    return {
      vehicles: vehicles.map(vehicle => ({
        _id: vehicle._id,
        licensePlate: vehicle.licensePlate,
        capacity: vehicle.capacity,
        image: vehicle.imageVehicle,
        registeredAt: vehicle.createdAt
      })),
      total: vehicles.length
    };
  } catch (error) {
    console.error('‚ùå Error in getUserVehicles:', error);
    throw new Error('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin xe');
  }
}

export async function addUserVehicle(userId, vehicleData) {
  try {
    const { licensePlate, capacity, imageVehicle } = vehicleData;
    
    console.log(`‚ûï Adding vehicle for user: ${userId}`, { licensePlate, capacity });

    // Ki·ªÉm tra xe ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingVehicle = await Vehicle.findOne({ licensePlate });
    if (existingVehicle) {
      throw new Error('Bi·ªÉn s·ªë xe ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω trong h·ªá th·ªëng');
    }

    const vehicle = await Vehicle.create({
      licensePlate: licensePlate.toUpperCase(),
      capacity,
      imageVehicle: imageVehicle || '',
      userId
    });

    return {
      success: true,
      vehicle: {
        _id: vehicle._id,
        licensePlate: vehicle.licensePlate,
        capacity: vehicle.capacity,
        image: vehicle.imageVehicle
      }
    };
  } catch (error) {
    console.error('‚ùå Error in addUserVehicle:', error);
    throw new Error(`Kh√¥ng th·ªÉ th√™m xe: ${error.message}`);
  }
}

export async function removeUserVehicle(vehicleId, userId) {
  try {
    console.log(`üóëÔ∏è Removing vehicle: ${vehicleId} for user: ${userId}`);
    
    const vehicle = await Vehicle.findOne({ _id: vehicleId, userId });
    
    if (!vehicle) {
      throw new Error('Kh√¥ng t√¨m th·∫•y xe ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a');
    }

    // TODO: Ki·ªÉm tra xem xe c√≥ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong booking active kh√¥ng

    await Vehicle.findByIdAndDelete(vehicleId);

    return {
      success: true,
      message: 'ƒê√£ x√≥a xe th√†nh c√¥ng',
      vehicleId: vehicle._id
    };
  } catch (error) {
    console.error('‚ùå Error in removeUserVehicle:', error);
    throw new Error(`Kh√¥ng th·ªÉ x√≥a xe: ${error.message}`);
  }
}