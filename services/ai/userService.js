import User from "../../models/user.model.js";
import Vehicle from "../../models/vehicles.model.js";
import Booking from "../../models/booking.model.js";
import ParkingLot from "../../models/parkinglot.model.js";
import mongoose from 'mongoose';

// Import c√°c h√†m th·ªëng k√™ t·ª´ statisticsFunctions.js
import { getUserStats, getOwnerRevenue, getAdminStats } from "./functions/statisticsFunctions.js";

export async function getUserInfo(userId) {
  console.log(`üîç getUserInfo called with userId: ${userId}`);
  try {
    if (!userId || typeof userId !== 'string' || userId.length < 10) {
      return {
        role: 'guest',
        name: 'Kh√°ch v√£ng lai',
        userId: null,
        contextInfo: 'Ch·ªâ c√≥ th·ªÉ xem th√¥ng tin c∆° b·∫£n v·ªÅ b√£i xe. Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng.',
        availableActions: ['search_parking_lots']
      };
    }

    const user = await User.findById(userId);
    if (!user) {
      return {
        role: 'guest',
        name: 'User kh√¥ng t·ªìn t·∫°i',
        userId: null,
        contextInfo: 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët h∆°n',
        availableActions: ['search_parking_lots']
      };
    }

    let contextInfo = '';
    let availableActions = [];

    switch (user.role) {
      case 'user':
        try {
          const userStats = await getUserStats(userId);
          contextInfo = `Kh√°ch h√†ng c√≥ ${userStats.vehicleCount} xe, ${userStats.bookingCount} l∆∞·ª£t ƒë·∫∑t ch·ªó, ${userStats.activeBookings} ƒë·∫∑t ch·ªó ƒëang ho·∫°t ƒë·ªông.`;
        } catch (statsError) {
          console.error('‚ùå Error getting user stats:', statsError);
          contextInfo = 'Kh√°ch h√†ng - ƒëang t·∫£i th√¥ng tin...';
        }
        availableActions = ['get_user_stats', 'get_user_vehicles', 'search_parking_lots', 'get_user_bookings'];
        break;

      case 'parking_owner':
        try {
          const ownerStats = await getOwnerRevenue(userId);
          contextInfo = `Ch·ªß b√£i xe qu·∫£n l√Ω ${ownerStats.parkingLotCount} b√£i, t·ªïng doanh thu ${ownerStats.totalRevenue?.toLocaleString() || 0}ƒë.`;
        } catch (statsError) {
          console.error('‚ùå Error getting owner stats:', statsError);
          contextInfo = 'Ch·ªß b√£i xe - ƒëang t·∫£i th√¥ng tin...';
        }
        availableActions = ['get_owner_revenue', 'search_parking_lots'];
        break;

      case 'admin':
        try {
          const adminStats = await getAdminStats(userId);
          contextInfo = `Qu·∫£n tr·ªã vi√™n - H·ªá th·ªëng c√≥ ${adminStats.totalUsers} ng∆∞·ªùi d√πng, ${adminStats.totalParkingLots} b√£i xe.`;
        } catch (statsError) {
          console.error('‚ùå Error getting admin stats:', statsError);
          contextInfo = 'Qu·∫£n tr·ªã vi√™n - ƒëang t·∫£i th√¥ng tin...';
        }
        availableActions = ['get_admin_stats', 'search_parking_lots'];
        break;

      default:
        contextInfo = 'User v·ªõi quy·ªÅn h·∫°n c∆° b·∫£n.';
        availableActions = ['search_parking_lots'];
    }

    return {
      role: user.role,
      name: user.userName,
      email: user.email,
      userId: userId,
      contextInfo,
      availableActions
    };
  } catch (error) {
    console.error('‚ùå L·ªói getUserInfo:', error);
    console.error('‚ùå Stack trace:', error.stack);
    return {
      role: 'guest',
      name: 'L·ªói h·ªá th·ªëng',
      userId: null,
      contextInfo: 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i sau.',
      availableActions: ['search_parking_lots'],
      error: error.message
    };
  }
}